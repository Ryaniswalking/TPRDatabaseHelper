package org.walker.tprDBHelper.views;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.text.DefaultCaret;
import java.awt.*;
import java.awt.event.ActionListener;
import java.util.Base64;
import java.util.concurrent.atomic.AtomicReference;

public class TestCaseView extends JFrame {

    private JPanel mainPanel;

    private JLabel lbl_TestCaseName;
    private JTextField txt_TestCaseName;
    private JLabel lbl_TestDescription;
    private JScrollPane sp_Description;
    private JTextArea txtArea_TestDescription;
    private JLabel lbl_SourceAppCode;
    private JTextField txt_SourceAppCode;
    private JLabel lbl_RequestDec;

    private JLabel lbl_ResponseDec;
    private JTextArea txtArea_ResponseDec;
    private JTextArea txtArea_RequestDec;
    private JScrollPane sp_Response;
    private JScrollPane sp_Request;
    private JButton btn_Save;
    private JButton btn_Back;
    private JTextArea txt_RequestChild;
    private JTextArea txt_ResponseChild;
    private JPanel panel_ChildData;

    public TestCaseView() {

        $$$setupUI$$$();
        this.setSize(850, 900);
        Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        this.setLocation(dim.width / 2 - this.getSize().width / 2, dim.height / 2 - this.getSize().height / 2);
        this.setDefaultCloseOperation(EXIT_ON_CLOSE);

        this.add(mainPanel);
    }

    public void addSaveButtonListener(ActionListener listenForSave) {
        btn_Save.addActionListener(listenForSave);
    }

    public void addBackButtonListener(ActionListener listenForBack) {
        btn_Back.addActionListener(listenForBack);
    }

    public void setTestCaseNameText(String value) {
        this.txt_TestCaseName.setText(value);
    }

    public void setTestDescriptionText(String value) {
        this.txtArea_TestDescription.setText(value);
    }

    public void setSourceAppCodeText(String value) {
        this.txt_SourceAppCode.setText(value);
    }

    public void setDecodedRequestText(String value) {
        this.txtArea_RequestDec.setText(value);
        this.txtArea_RequestDec.setCaretPosition(0);
    }

    public void setDecodedResponseText(String value) {
        this.txtArea_ResponseDec.setText(value);
        this.txtArea_ResponseDec.setCaretPosition(0);
    }

    public void setDecodedRequestChildText(String value) {
        this.txt_RequestChild.setText(value);
        this.txt_RequestChild.setCaretPosition(0);
    }

    public void setDecodedResponseChildText(String value) {
        this.txt_ResponseChild.setText(value);
        this.txt_ResponseChild.setCaretPosition(0);
    }

    public String getTestCaseNameText() {
        return this.txt_TestCaseName.getText();
    }

    public String getTestDescriptionText() {
        return this.txtArea_TestDescription.getText();
    }

    public String getSourceAppCodeText() {
        return this.txt_SourceAppCode.getText();
    }

    public String getRequestTextEncoded() {
        String encodedRequest = Base64.getEncoder().encodeToString(this.txtArea_RequestDec.getText().getBytes());
        return encodedRequest;
    }

    public String getResponseTextEncoded() {
        AtomicReference<String> encodedResponse = new AtomicReference<>(Base64.getEncoder().encodeToString(this.txtArea_ResponseDec.getText().getBytes()));
        return encodedResponse.get();
    }

    public String getRequestChildTextEncoded() {
        String encodedRequest = Base64.getEncoder().encodeToString(this.txt_RequestChild.getText().getBytes());
        return encodedRequest;
    }

    public String getResponseChildTextEncoded() {
        String encodedResponse = Base64.getEncoder().encodeToString(this.txt_ResponseChild.getText().getBytes());
        return encodedResponse;
    }

    //set visibility or child req/res panel
    public void showChildDataPanel(Boolean value) {
        panel_ChildData.setVisible(value);
    }

    public Boolean isChildPanelVisible() {
        return panel_ChildData.isVisible();
    }

    private void createUIComponents() {

        txtArea_RequestDec = new JTextArea();
        txtArea_ResponseDec = new JTextArea();

        //Set default caret to never update so the scroll bar default to top location after textfield is added.
        DefaultCaret caret = (DefaultCaret) txtArea_ResponseDec.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        caret = (DefaultCaret) txtArea_RequestDec.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        sp_Request = new JScrollPane(txtArea_RequestDec, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        sp_Response = new JScrollPane(txtArea_ResponseDec, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(6, 4, new Insets(0, 0, 0, 10), -1, -1));
        mainPanel.add(sp_Request, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        sp_Request.setViewportView(txtArea_RequestDec);
        lbl_ResponseDec = new JLabel();
        lbl_ResponseDec.setText("Response");
        mainPanel.add(lbl_ResponseDec, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mainPanel.add(sp_Response, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        txtArea_ResponseDec.setRows(0);
        sp_Response.setViewportView(txtArea_ResponseDec);
        lbl_SourceAppCode = new JLabel();
        lbl_SourceAppCode.setText("Source App Code");
        mainPanel.add(lbl_SourceAppCode, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txt_SourceAppCode = new JTextField();
        mainPanel.add(txt_SourceAppCode, new GridConstraints(1, 1, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        lbl_RequestDec = new JLabel();
        lbl_RequestDec.setText("Request");
        mainPanel.add(lbl_RequestDec, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lbl_TestDescription = new JLabel();
        lbl_TestDescription.setText("Description");
        mainPanel.add(lbl_TestDescription, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        sp_Description = new JScrollPane();
        mainPanel.add(sp_Description, new GridConstraints(2, 1, 1, 3, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, 1, GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(-1, 40), new Dimension(-1, 40), 0, false));
        txtArea_TestDescription = new JTextArea();
        txtArea_TestDescription.setLineWrap(true);
        txtArea_TestDescription.setMaximumSize(new Dimension(850, -1));
        txtArea_TestDescription.setMinimumSize(new Dimension(535, 60));
        txtArea_TestDescription.setRows(0);
        txtArea_TestDescription.setWrapStyleWord(true);
        txtArea_TestDescription.putClientProperty("caretAspectRatio", new Double(0.0));
        txtArea_TestDescription.putClientProperty("html.disable", Boolean.FALSE);
        sp_Description.setViewportView(txtArea_TestDescription);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(5, 1, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        btn_Save = new JButton();
        btn_Save.setText("Save");
        panel1.add(btn_Save, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        btn_Back = new JButton();
        btn_Back.setText("Back");
        panel1.add(btn_Back, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(5, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, new GridConstraints(0, 0, 1, 4, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lbl_TestCaseName = new JLabel();
        lbl_TestCaseName.setText("Test Case Name  ");
        panel2.add(lbl_TestCaseName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txt_TestCaseName = new JTextField();
        txt_TestCaseName.setMargin(new Insets(2, 6, 2, 6));
        panel2.add(txt_TestCaseName, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        panel_ChildData = new JPanel();
        panel_ChildData.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel_ChildData, new GridConstraints(3, 2, 2, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        panel_ChildData.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        txt_RequestChild = new JTextArea();
        scrollPane1.setViewportView(txt_RequestChild);
        final JScrollPane scrollPane2 = new JScrollPane();
        panel_ChildData.add(scrollPane2, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        txt_ResponseChild = new JTextArea();
        scrollPane2.setViewportView(txt_ResponseChild);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
